<!-- Interactive Week Planning Grid Component for Assignments -->
<div id="planning-grid" class="bg-gray-800 dark:bg-gray-800 rounded-lg shadow overflow-hidden">
  <div class="grid grid-cols-8 gap-px bg-gray-600">
    <!-- Header row -->
    <div class="bg-gray-700 p-4 font-semibold text-center text-gray-200"></div>
    <% dayNames.forEach((dayName, index) => { %>
      <div class="bg-gray-700 p-4 font-semibold text-center text-gray-200">
        <div class="text-sm font-medium"><%= dayName %></div>
      </div>
    <% }); %>

    <!-- Ouverture row -->
    <div class="bg-gray-600 p-4 font-semibold text-center text-gray-200 flex items-center justify-center">
      <div class="flex items-center">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z"></path>
        </svg>
        Ouverture
      </div>
    </div>
    <% dayNames.forEach((dayName, dayIndex) => { %>
      <div class="bg-gray-800 p-4 min-h-20 relative">
        <div class="space-y-2">
          <% const dayAssignments = assignments.filter(assignment => assignment.weekday === dayIndex && assignment.slot_type === 'ouverture'); %>
          <% renderAssignmentTags(dayAssignments, dayIndex, 'ouverture'); %>
        </div>
        <!-- Add member button -->
        <button class="absolute bottom-2 right-2 w-6 h-6 bg-gray-600 hover:bg-gray-500 text-gray-300 hover:text-white rounded-full flex items-center justify-center transition-colors duration-200 opacity-60 hover:opacity-100"
                onclick="showMemberSelector('<%= dayIndex %>', 'ouverture')">
          <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
        </button>
      </div>
    <% }); %>
    <!-- Fermeture row -->
    <div class="bg-gray-600 p-4 font-semibold text-center text-gray-200 flex items-center justify-center">
      <div class="flex items-center">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
        </svg>
        Fermeture
      </div>
    </div>
    <% dayNames.forEach((dayName, dayIndex) => { %>
      <div class="bg-gray-800 p-4 min-h-20 relative">
        <div class="space-y-2">
          <% const dayAssignments = assignments.filter(assignment => assignment.weekday === dayIndex && assignment.slot_type === 'fermeture'); %>
          <% renderAssignmentTags(dayAssignments, dayIndex, 'fermeture'); %>
        </div>
        <!-- Add member button -->
        <button class="absolute bottom-2 right-2 w-6 h-6 bg-gray-600 hover:bg-gray-500 text-gray-300 hover:text-white rounded-full flex items-center justify-center transition-colors duration-200 opacity-60 hover:opacity-100"
                onclick="showMemberSelector('<%= dayIndex %>', 'fermeture')">
          <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
        </button>
      </div>
    <% }); %>
  </div>
</div>

<!-- Member Selection Modal -->
<div id="memberSelectorModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
  <div class="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
    <h3 class="text-lg font-medium text-white mb-4">Ajouter un Membre</h3>
    
    <!-- Filter Input -->
    <div class="relative mb-4">
      <input 
        type="text" 
        id="memberFilterInput"
        placeholder="Filtrer les membres..."
        class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        oninput="filterMembers()"
      >
      <div class="absolute right-3 top-2.5 text-gray-400">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>
    
    <!-- Member Tags Grid -->
    <div id="memberSelectorContent" class="space-y-3 max-h-60 overflow-y-auto p-1">
      <!-- Member tag options will be populated here -->
    </div>
    
    <!-- Loading Spinner -->
    <div id="memberSelectorSpinner" class="htmx-indicator flex items-center justify-center py-8">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      <span class="ml-3 text-gray-300">Ajout en cours...</span>
    </div>
    
    <div class="flex justify-end space-x-3 mt-6">
      <button id="memberSelectorCancelBtn" onclick="closeMemberSelector()" class="px-4 py-2 text-gray-400 hover:text-white transition-colors duration-200">
        Annuler
      </button>
    </div>
  </div>
</div>

<!-- Confirmation Modal -->
<div id="confirmationModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
  <div class="bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
    <h3 class="text-lg font-medium text-white mb-4">Confirmer la Suppression</h3>
    <p id="confirmationMessage" class="text-gray-300 mb-6"></p>
    <div class="flex justify-end space-x-3">
      <button onclick="closeConfirmationModal()" class="px-4 py-2 text-gray-400 hover:text-white transition-colors duration-200">
        Annuler
      </button>
      <button id="confirmRemoveButton" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200">
        Supprimer
      </button>
    </div>
  </div>
</div>

<script>
let currentMemberToRemove = null;
let currentSlotForAdd = null;

// Remove member confirmation
function confirmRemoveMember(memberId, weekday, slotType, memberName) {
  currentMemberToRemove = { memberId, weekday, slotType };
  document.getElementById('confirmationMessage').textContent = 
    `Êtes-vous sûr de vouloir retirer ${memberName} de ce créneau ?`;
  document.getElementById('confirmationModal').classList.remove('hidden');
  
  document.getElementById('confirmRemoveButton').onclick = function() {
    removeMember(memberId, weekday, slotType);
    closeConfirmationModal();
  };
}

function closeConfirmationModal() {
  document.getElementById('confirmationModal').classList.add('hidden');
  currentMemberToRemove = null;
}

// Remove member
function removeMember(memberId, weekday, slotType) {
  // Get current assignments for this slot
  const currentAssignments = assignments.filter(a => 
    a.weekday == weekday && a.slot_type === slotType
  );
  
  // Remove the specific member
  const updatedMemberIds = currentAssignments
    .filter(a => a.member_id != memberId)
    .map(a => a.member_id);
  
  // Send update request
  fetch(`/api/assignments/${weekday}/${slotType}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ memberIds: updatedMemberIds })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showToast('Membre retiré avec succès', 'success');
      // Don't show warnings when removing members - this is intentional user action
      // Refresh the page to show updated assignments
      setTimeout(() => window.location.reload(), 1000);
    } else {
      showToast('Erreur lors de la suppression', 'error');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showToast('Erreur lors de la suppression', 'error');
  });
}

// Show member selector
function showMemberSelector(weekday, slotType) {
  currentSlotForAdd = { weekday, slotType };
  
  // Get currently assigned members for this slot
  const currentlyAssigned = assignments
    .filter(a => a.weekday == weekday && a.slot_type === slotType)
    .map(a => a.member_id);
  
  // Store all members with their assignment status
  window.allMembers = members.map(member => ({
    ...member,
    isAssigned: currentlyAssigned.includes(member.id)
  }));
  
  // Clear filter input
  document.getElementById('memberFilterInput').value = '';
  
  // Render member tags
  renderMemberTags();
  
  document.getElementById('memberSelectorModal').classList.remove('hidden'); 
  
  // Focus on filter input
  setTimeout(() => {
    document.getElementById('memberFilterInput').focus();
  }, 100);
}

function closeMemberSelector() {
  document.getElementById('memberSelectorModal').classList.add('hidden');
  currentSlotForAdd = null;
}

// Note: Loading states are now handled automatically by HTMX htmx-indicator class

// Render member tags
function renderMemberTags(filteredMembers = null) {
  const selectorContent = document.getElementById('memberSelectorContent');
  const membersToShow = filteredMembers || window.allMembers;
  
  selectorContent.innerHTML = '';
  
  if (!membersToShow || membersToShow.length === 0) {
    const noMembersMsg = filteredMembers ? 
      '<p class="text-gray-400 text-center">Aucun membre trouvé</p>' :
      '<p class="text-gray-400 text-center">Aucun membre disponible</p>';
    selectorContent.innerHTML = noMembersMsg;
    return;
  }
  
  // Create flex container for tags
  const tagsContainer = document.createElement('div');
  tagsContainer.className = 'flex flex-wrap gap-2 p-1';
  
  membersToShow.forEach(member => {
    if (member.isAssigned) {
      // Create disabled tag for assigned members
      const disabledTag = document.createElement('div');
      disabledTag.className = 'inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-500 bg-gray-600 rounded-full cursor-not-allowed opacity-60';
      disabledTag.textContent = member.display_name || member.first_name;
      disabledTag.title = 'Ce membre est déjà assigné à ce créneau';
      
      tagsContainer.appendChild(disabledTag);
    } else {
      // Calculate the new memberIds array (current + new member)
      const currentAssignments = assignments.filter(a => 
        a.weekday == currentSlotForAdd.weekday && a.slot_type === currentSlotForAdd.slotType
      );
      const currentMemberIds = currentAssignments.map(a => a.member_id);
      const newMemberIds = [...currentMemberIds, member.id];
      
      // Create clickable tag with HTMX attributes as HTML
      const tagHTML = `
        <button 
          class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-blue-900 bg-blue-200 rounded-full hover:bg-blue-300 hover:text-blue-800 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
          hx-post="/api/assignments/${currentSlotForAdd.weekday}/${currentSlotForAdd.slotType}"
          hx-vals='${JSON.stringify({ memberIds: newMemberIds })}'
          hx-indicator="#memberSelectorSpinner"
          data-member-name="${member.display_name || member.first_name}"
          style="transform: scale(1); transition: transform 0.2s;"
          onmouseover="this.style.transform='scale(1.02)'"
          onmouseout="this.style.transform='scale(1)'"
        >
          ${member.display_name || member.first_name}
        </button>
      `;
      
      tagsContainer.insertAdjacentHTML('beforeend', tagHTML);
    }
  });
  
  selectorContent.appendChild(tagsContainer);
  
  // Process HTMX attributes on newly created elements
  if (typeof htmx !== 'undefined') {
    htmx.process(tagsContainer);
    
    // Add event listeners for HTMX requests on the new elements
    const memberButtons = tagsContainer.querySelectorAll('button[hx-post]');
    memberButtons.forEach(button => {
      button.addEventListener('htmx:afterRequest', function(evt) {
        const memberName = button.getAttribute('data-member-name');
        console.log('HTMX request completed for:', memberName);
        
        if (evt.detail.successful) {
          try {
            const data = JSON.parse(evt.detail.xhr.responseText);
            if (data.success) {
              closeMemberSelector();
              showToast('Membre ajouté avec succès', 'success');
              // Show warnings if any
              if (data.warnings && data.warnings.length > 0) {
                setTimeout(() => {
                  data.warnings.forEach(warning => showToast(warning, 'warning'));
                }, 500);
              }
              // Update local assignments and refresh grid
              const hxVals = JSON.parse(button.getAttribute('hx-vals'));
              updateLocalAssignments(currentSlotForAdd.weekday, currentSlotForAdd.slotType, hxVals.memberIds);
            } else {
              showToast('Erreur lors de l\'ajout', 'error');
            }
          } catch (e) {
            console.error('Error parsing response:', e);
            showToast('Erreur lors de l\'ajout', 'error');
          }
        } else {
          showToast('Erreur lors de l\'ajout', 'error');
        }
      });
    });
  }
}

// Filter members based on input
function filterMembers() {
  const filterInput = document.getElementById('memberFilterInput');
  const filterValue = filterInput.value.toLowerCase().trim();
  
  if (filterValue === '') {
    renderMemberTags();
    return;
  }
  
  // Filter all members (both available and assigned)
  const filteredMembers = window.allMembers.filter(member => {
    const displayName = (member.display_name || member.first_name || '').toLowerCase();
    const firstName = (member.first_name || '').toLowerCase();
    const lastName = (member.last_name || '').toLowerCase();
    
    return displayName.includes(filterValue) || 
           firstName.includes(filterValue) || 
           lastName.includes(filterValue);
  });
  
  renderMemberTags(filteredMembers);
}

// Update local assignments and refresh grid display
function updateLocalAssignments(weekday, slotType, newMemberIds) {
  // Remove old assignments for this slot
  assignments = assignments.filter(a => !(a.weekday == weekday && a.slot_type === slotType));
  
  // Add new assignments
  newMemberIds.forEach(memberId => {
    const member = members.find(m => m.id === memberId);
    if (member) {
      assignments.push({
        weekday: weekday,
        slot_type: slotType,
        member_id: memberId,
        member_name: member.first_name,
        display_name: member.display_name || member.first_name
      });
    }
  });
  
  // Find and update the specific slot in the grid
  updateSlotDisplay(weekday, slotType);
}

function updateSlotDisplay(weekday, slotType) {
  // Find the slot cell in the grid and update its content
  const slots = document.querySelectorAll('.bg-gray-800');
  slots.forEach(slot => {
    const addButton = slot.querySelector('button[onclick*="showMemberSelector"]');
    if (addButton && addButton.getAttribute('onclick').includes(`'${weekday}'`) && addButton.getAttribute('onclick').includes(`'${slotType}'`)) {
      // Get current assignments for this slot
      const slotAssignments = assignments.filter(a => a.weekday == weekday && a.slot_type === slotType);
      
      // Find the container with assignment tags
      const tagsContainer = slot.querySelector('.space-y-2');
      if (tagsContainer) {
        // Clear existing tags
        tagsContainer.innerHTML = '';
        
        // Add new tags
        slotAssignments.forEach(assignment => {
          const tagSpan = document.createElement('span');
          tagSpan.className = 'inline-flex items-center relative px-2 py-1 hover:pr-6 text-xs font-medium text-blue-900 bg-blue-200 rounded-full group transition-all duration-200 cursor-pointer hover:pr-1';
          tagSpan.style.fontSize = '0.85rem';
          
          const nameSpan = document.createElement('span');
          nameSpan.className = 'flex-shrink-0';
          nameSpan.textContent = assignment.display_name || assignment.member_name;
          
          const removeButton = document.createElement('button');
          removeButton.className = 'absolute right-0 -translate-x-1/2 -translate-y-[1px] opacity-0 group-hover:opacity-100 text-red-400 transition-all duration-200 flex-shrink-0';
          removeButton.style.cssText = 'line-height: 1; height: 1em; width: 1em;';
          removeButton.setAttribute('onclick', `confirmRemoveMember('${assignment.member_id}', '${weekday}', '${slotType}', '${assignment.display_name || assignment.member_name}')`);
          removeButton.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 16 16"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4L12 12M4 12L12 4"></path></svg>';
          
          tagSpan.appendChild(nameSpan);
          tagSpan.appendChild(removeButton);
          tagsContainer.appendChild(tagSpan);
        });
        
        // Add "no assignments" message if empty
        if (slotAssignments.length === 0) {
          const noAssignmentsDiv = document.createElement('div');
          noAssignmentsDiv.className = 'text-xs text-gray-500 italic';
          noAssignmentsDiv.textContent = 'Aucune affectation';
          tagsContainer.appendChild(noAssignmentsDiv);
        }
      }
    }
  });
}

// Toast notification function
function showToast(message, type = 'success') {
  const toast = document.createElement('div');
  let bgColor;
  switch(type) {
    case 'success':
      bgColor = 'bg-green-600';
      break;
    case 'warning':
      bgColor = 'bg-yellow-600';
      break;
    case 'error':
      bgColor = 'bg-red-600';
      break;
    default:
      bgColor = 'bg-blue-600';
  }
  
  // Check if mobile
  const isMobile = window.innerWidth < 768;
  
  if (isMobile) {
    // Mobile: Bottom bar
    toast.className = `fixed bottom-0 left-0 right-0 px-4 py-3 text-white text-center z-50 ${bgColor} shadow-lg transform translate-y-full transition-transform duration-300 ease-out`;
  } else {
    // Desktop: Bottom right
    toast.className = `fixed px-4 py-3 rounded-lg text-white z-50 ${bgColor} shadow-lg transform translate-x-full transition-all duration-300 ease-out max-w-sm`;
    
    // Position and stack toasts
    const existingToasts = document.querySelectorAll('[data-toast]');
    const offset = existingToasts.length * 70;
    toast.style.bottom = `${16 + offset}px`;
    toast.style.right = '16px';
  }
  
  toast.textContent = message;
  toast.setAttribute('data-toast', 'true');
  document.body.appendChild(toast);
  
  // Animate in
  requestAnimationFrame(() => {
    requestAnimationFrame(() => {
      if (isMobile) {
        toast.classList.remove('translate-y-full');
      } else {
        toast.classList.remove('translate-x-full');
      }
    });
  });
  
  // Auto-hide after 5 seconds
  setTimeout(() => {
    if (isMobile) {
      toast.classList.add('translate-y-full');
    } else {
      toast.classList.add('translate-x-full');
    }
    
    // Remove from DOM after animation
    setTimeout(() => {
      if (toast.parentNode) {
        toast.remove();
      }
    }, 300);
  }, 5000);
}

<% function renderAssignmentTags(dayAssignments, dayIndex, slotType) { %>
  <% dayAssignments.forEach(assignment => { %>
    <span class="inline-flex items-center relative px-2 py-1 hover:pr-6 text-xs font-medium text-blue-900 bg-blue-200 rounded-full group transition-all duration-200 cursor-pointer hover:pr-1"
          style="font-size: 0.85rem;">
      <span class="flex-shrink-0"><%= assignment.display_name || assignment.member_name %></span>
      <button class="absolute right-0 -translate-x-1/2 -translate-y-[1px] opacity-0 group-hover:opacity-100 text-red-400 transition-all duration-200 flex-shrink-0"
              style="line-height: 1; height: 1em; width: 1em;"
              onclick="confirmRemoveMember('<%= assignment.member_id %>', '<%= dayIndex %>', '<%= slotType %>', '<%= assignment.display_name || assignment.member_name %>')")>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 16 16">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4L12 12M4 12L12 4"></path>
        </svg>
      </button>
    </span>
  <% }); %>
  <% if (dayAssignments.length === 0) { %>
    <div class="text-xs text-gray-500 italic">Aucune affectation</div>
  <% } %>
<% } %>

// Make data available to the script
window.assignments = <%- JSON.stringify(assignments) %>;
window.members = <%- JSON.stringify(members) %>;
</script>